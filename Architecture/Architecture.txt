Клиент-серверное приложение для поддержки работы полевых групп археологов Кафедры археологии Санкт-Петербургского государственного Университета.

Необходимость написания приложения: сотрудники жалуются, что пересылка материалов по электронной почте приводит к беспорядку, утере данных. Отсутствие централизованной базы данных. Полная анархия, одним словом.

Идея: археологи в процессе раскопок документируют найденные исторические ценности, заполняются обязательные стандартизированные отчеты, данные и фотографии пересылают на кафедру, руководитель проекта после проверки данных дает разрешение на внесение экспонатов в базу данных.

Приложение представляет собой многоуровневую архитектуру взаимодействия клиента с сервером. Клиент - в первую очередь полевые группы исследователей на раскопках (в части внесения новой информации в базу данных), а также прочие сотрудники кафедры (в части получения информации из базы данных). Сервер - кафедра.
1. Уровень клиента.
Дополнительное ПО не требуется.Стандартный web-браузер, HTML + CSS + JavaSqript, кодировка UTF-8. На стороне браузера методами JS осуществляется "защита от дурака": проверяется правильность заполнения форм, диапазоны значений, маски ввода. Сформированный пакет из отчетности и фотографий экспоната по протоколу HTTPS направляется на сервер.
Прямые обращения к базе данных запрещены!
2. Контроллер "Прием документов/запросов"
Прием на сокет и первичная обработка информации от клиента. Проверяются права доступа клиента, правильность оформления документации. В случае некорректных данных сервис возвращает ошибку, которая должна быть обработана на стороне клиента. В случае прохождения проверки данные поступают на обработку руководителю проекта, на следующий этап.
3. Контроллер "Проверка образцов"
Руководитель проекта изучает полученные данные по образцам, сравнивает с данными, находящимися в базе данных, при необходимости запрашивает дополнительную информацию у полевого сотрудника. В случае, если образец представляет собой научный интерес - данные заносятся в базу данных.
4. База данных MySQL, соединение при помощи JDBC совместимого драйвера.

Архитектура модульная, при необходимости может быть легко расширена/изменена.

Информационная безопасность системы
- запрет на прямые обращения к базе данных от клиента
- защита от несанкционированного доступа в систему, на каждом уровне
- защита от несанкционированного выполнения операций в системе (многоуровневая система привилегий, разделение функций клиентов и  администраторов)
- защита информации, передаваемой по каналам связи

Надежность системы
- в системе может быть развернуто нескольких версий одного сервиса, переключение пользователей на новую версию происходит без остановки системы
- При возникновении сбоев критичных компонентов (контроллеры, база данных) потоки перенаправляются на работоспособные узлы кластера
- Использование высоконадежных серверных платформ
- Резервирование каналов связи

Производительность системы
- Использование ПО, предназначенного для обработки больших объемов данных
- Использование высокоскоростных каналов передачи данных.